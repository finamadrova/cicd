# Global variables that can be overridden in the job level, or in the pipeline level
variables:
  GABLE_API_ENDPOINT: 
    description: The URL of the Gable API endpoint
  GABLE_API_KEY: 
    description: The API key used to authenticate with the Gable API
  GABLE_CLI_VERSION: 
    description: The version of the gable CLI to install. Defaults to latest.
    value: 'latest'
  GABLE_ALLOW_PRE_RELEASE: 
    description: Whether or not to install pre-release versions of Gable. Defaults to false.
    options:
      - true
      - false
    value: false

.install-gable-before: &install-gable-before
  - |
    set -xv
    echo "Using Python: ${PYTHON_PATH:-python}"
    if [ "$GABLE_ALLOW_PRE_RELEASE" = "true" ]; then
      echo "Installing pre-release versions of Gable!"
      PRE_RELEASE_TAG="--pre"
    else
      PRE_RELEASE_TAG=""
    fi
    if [ "$GABLE_CLI_VERSION" = "latest" ]; then
      ${PYTHON_PATH:-python} -m pip install -q gable[postgres,mysql] $PRE_RELEASE_TAG
    else
      ${PYTHON_PATH:-python} -m pip install -q gable[postgres,mysql]=="$GABLE_CLI_VERSION" $PRE_RELEASE_TAG
    fi
    gable --version

.post-comment: &post-comment
    - |
      # Assuming you're in a merge request pipeline
      if [ -z "$CI_MERGE_REQUEST_IID" ]; then
        echo "This job only runs in merge request pipelines."
        exit 0
      fi
      if [ -z "$GABLE_MR_COMMENT_MARKDOWN" ]; then
        echo No contract violations found.
      fi

      # Post the comment to the merge request
      curl --request POST --header "PRIVATE-TOKEN: $GABLE_MR_COMMENT_TOKEN" --data "body=$GABLE_MR_COMMENT_MARKDOWN" "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/merge_requests/$CI_MERGE_REQUEST_IID/notes"

.validate-contracts:
  image: python:3.11
  variables:
    GABLE_CLI_VERSION:
      value: 'latest'
    GABLE_CONTRACT_PATHS: 
      description: |
        Space delimited path(s) to the contracts to publish, with support for glob patterns. Example: 
          "service1/**/*.yml contracts/service2/example_contract.yml"
        This input may also be specified as a multiline string, with each line representing a path to contract(s) to publish. Example:
          contract-paths: |
            service1/**/*.yml
            service2/example_contract.yml
  script:
    - *install-gable-before
    - |
      set -xv
      echo "Validating Contracts..."
      echo "Gable Endpoint $GABLE_API_ENDPOINT"
      echo "Contract Path(s) $GABLE_CONTRACT_PATHS"
      gable contract validate $GABLE_CONTRACT_PATHS

# Publishes new or updated contracts to Gable. Publishing a contract is idempotent - if no update has been made to the contract the 
# publish will be a no-op, so it's safe to publish all contracts on every run.
.publish-contracts:
  image: python:3.11
  variables:
    GABLE_CLI_VERSION:
      value: 'latest'
    GABLE_CONTRACT_PATHS: 
      description: |
        Space delimited path(s) to the contracts to publish, with support for glob patterns. Example: 
          "service1/**/*.yml contracts/service2/example_contract.yml"
        This input may also be specified as a multiline string, with each line representing a path to contract(s) to publish. Example:
          contract-paths: |
            service1/**/*.yml
            service2/example_contract.yml

  script:
    - *install-gable-before
    - |
      set -xv
      echo "Publishing Contracts..."
      echo "Gable Endpoint $GABLE_API_ENDPOINT"
      echo "Contract Path(s) $GABLE_CONTRACT_PATHS"
      gable contract publish $GABLE_CONTRACT_PATHS

.register-data-assets:
  variables:
    GABLE_CLI_VERSION:
      value: 'latest'
    GABLE_DATA_ASSET_REGISTER_OPTIONS:
      description: "Options passed in to the 'gable data-asset register' command"
  PYTHON_PATH: 
    description: |
      Path to the python executable to use, which allows you to create a virtual environment and install any necessary dependencies before running gable. 
      If not provided, the default python executable will be used.
    value: 'python'
  script:
    - *install-gable-before
    - |
      set -xv
      echo "Registering data assets..."
      echo "Gable Endpoint $GABLE_API_ENDPOINT"
      echo "Command options: $GABLE_DATA_ASSET_REGISTER_OPTIONS"
      ${PYTHON_PATH:-python} -m gable.cli data-asset register $GABLE_DATA_ASSET_REGISTER_OPTIONS


.check-data-assets:
  variables:
    GABLE_CLI_VERSION:
      value: 'latest'
    GABLE_DATA_ASSET_CHECK_OPTIONS:
      description: "Options passed in to the 'gable data-asset check' command"
    GABLE_MR_COMMENT_TOKEN:
      description: "The project API token with 'Reporter' role used to authenticate with the GitLab API to post a comment on the merge request"
  PYTHON_PATH: 
    description: |
      Path to the python executable to use, which allows you to create a virtual environment and install any necessary dependencies before running gable. 
      If not provided, the default python executable will be used.
    value: 'python'
  script:
    - *install-gable-before
    - |
      set -xv
      echo "Checking data assets..."
      echo "Gable Endpoint $GABLE_API_ENDPOINT"
      echo "Command options: $GABLE_DATA_ASSET_CHECK_OPTIONS"
      # Run gable data-asset check with the specified options
      export GABLE_MR_COMMENT_MARKDOWN=$("${PYTHON_PATH:-python}" -m gable.cli data-asset check --output markdown $GABLE_DATA_ASSET_CHECK_OPTIONS)
      echo "$GABLE_MR_COMMENT_MARKDOWN"
    - *post-comment
    - |
      # If there was error output
      if [ -s "gable_error.txt" ]; then
          # Print the error output that was captured so it shows up in the workflow's output
          cat "gable_error.txt"
          exit 1
      fi