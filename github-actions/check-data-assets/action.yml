name: check-data-assets
author: gabledata
description: Checks the data assets specified in the command against their contracts in Gable.
inputs:
  gable-api-endpoint:
    description: 'Gable API Endpoint in the format https://api.<organization>.gabledata.com'
    required: true
  gable-api-key:
    description: 'Gable API Key'
    required: true
  gable-version:
    description: 'Gable CLI Version. See https://pypi.org/project/gable/#history for a list of available versions.'
    required: false
    default: 'latest'
  allow-gable-pre-release:
    description: 'Whether or not to install pre-release versions of Gable'
    required: false
    default: 'false'
  data-asset-options:
    description: |
      Options passed in to the 'gable data-asset check' command
    required: true
  github-token:
    description: 'Github token used to comment on PR'
    default: ${{ github.token }}
    required: false 
  python-path:
    description: |
      [Optional] Path to the python executable to use, which allows you to create a virtual environment and install any necessary 
      dependencies before running gable. If not provided, the action will install Python on the runner.
    required: false
    default: 'python'
runs:
  using: "composite"
  steps:
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.10.11
    - name: Install Gable
      shell: bash
      run: |
        if [[ "${{ inputs.allow-gable-pre-release }}" == "true" ]]; then
          PRE_RELEASE_TAG="--pre"
        else
          PRE_RELEASE_TAG=""
        fi
        if [[ "${{ inputs.gable-version }}" == "latest" ]]; then
          pip install -q gable[postgres,mysql] $PRE_RELEASE_TAG
        else
          pip install -q gable[postgres,mysql]==${{ inputs.gable-version }} $PRE_RELEASE_TAG
        fi
        gable --version
    - name: Check out repository code
      uses: actions/checkout@v3
      with:
        # Don't clean the repository before checking out the code, we don't want to remove any virtual environments or dependencies
        # that may have been installed
        clean: 'false'
    - name: "Validate Contracts"
      env: 
        PR_NUMBER: ${{ github.event.number }}
        GH_TOKEN: ${{ inputs.github-token }}
      shell: "bash"
      run: |
        # Run gable data-asset check with the specified options
        export GABLE_API_ENDPOINT="${{ inputs.gable-api-endpoint }}"
        export GABLE_API_KEY="${{ inputs.gable-api-key }}"
        export PYTHON_PATH="${{ inputs.python-path }}"
        # If this was run on pull_request, comment on the PR if necessary
        if [[ "$PR_NUMBER" != "" ]]; then
          # Don't fail the comment step (yet) if we get a BLOCK result, but capture the exit code
          set +e
          COMMENT_MARKDOWN=$("$PYTHON_PATH" -m gable.cli data-asset check --output markdown ${{ inputs.data-asset-options }} 2> gable_error.txt)
          EXIT_CODE=$?
          set -e
          # Comment on the PR if there was output
          if [[ "$COMMENT_MARKDOWN" != "" ]]; then
            gh pr comment $PR_NUMBER -b "$COMMENT_MARKDOWN"
          else
            echo No contract violations found.
          fi

          # If there was error output
          if [ -s "gable_error.txt" ]; then
              # Print the error output that was captured so it shows up in the workflow's output
              cat "gable_error.txt"
          # Now exit with the exit code from gable data-asset check
          exit $EXIT_CODE
        fi
        else
          echo No PR number found, running gable data-asset check directly
          $PYTHON_PATH -m gable.cli data-asset check $INPUT_OPTIONS_TRIMMED
        fi

branding:
  icon: 'check-circle'
  color: 'purple'