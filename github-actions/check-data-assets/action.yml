name: check-data-assets
author: gabledata
description: Checks data assets defined in a product repository against their data contracts defined in Gable
inputs:
  gable-api-endpoint:
    description: 'Gable API Endpoint in the format https://api.<organization>.gabledata.com'
    required: true
  gable-api-key:
    description: 'Gable API Key'
    required: true
  gable-version:
    description: 'Gable Version'
    required: false
    default: 'latest'
  allow-gable-pre-release:
    description: 'Whether or not to install pre-release versions of Gable'
    required: false
    default: 'false'
  data-asset-options:
    description: |
      Options passed in to the 'gable data-asset check' command
    required: true
  github-token:
    description: 'Github token used to comment on PR'
    default: ${{ github.token }}
    required: false
runs:
  using: "composite"
  steps:
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.10.11
    - name: Install Gable
      shell: bash
      run: |
        if [[ "${{ inputs.allow-gable-pre-release }}" == "true" ]]; then
          PRE_RELEASE_TAG="--pre"
        else
          PRE_RELEASE_TAG=""
        fi
        if [[ "${{ inputs.gable-version }}" == "latest" ]]; then
          pip install -q gable[postgres,mysql] $PRE_RELEASE_TAG
        else
          pip install -q gable[postgres,mysql]==${{ inputs.gable-version }} $PRE_RELEASE_TAG
        fi
    - name: Check out repository code
      uses: actions/checkout@v3
    - name: "Validate Contracts"
      env: 
        PR_NUMBER: ${{ github.event.number }}
        GH_TOKEN: ${{ inputs.github-token }}
      shell: "bash"
      run: |
        # Run gable data-asset check with the specified options
        # Trim any trailing whitespace including newlines from the input options
        export INPUT_OPTIONS="${{ inputs.data-asset-options }}"
        export INPUT_OPTIONS_TRIMMED="${INPUT_OPTIONS%%+([[:space:]])}"
        # Call gable data-asset check
        GABLE_API_ENDPOINT="${{ inputs.gable-api-endpoint }}" GABLE_API_KEY="${{ inputs.gable-api-key }}" \
        gable data-asset check $INPUT_OPTIONS_TRIMMED 2> error.txt || true

        # If there was error output
        if [ -s "error.txt" ]; then
            # Print the error output that was captured so it shows up in the workflow's output
            cat "error.txt"
            # Comment on the PR
            echo "### Gable Contract Violation" > comment.txt
            echo "A change in this PR has altered the schema of a data asset that's currently under contract. Please review the changes, and contact the owner of the data contract (TODO: insert name)" >> comment.txt
            echo "" >> comment.txt
            echo "\`\`\`" >> comment.txt
            cat error.txt >> comment.txt
            echo "" >> comment.txt
            echo "\`\`\`" >> comment.txt

            gh pr comment $PR_NUMBER -b "$(cat comment.txt)"
        fi
branding:
  icon: 'check-circle'
  color: 'purple'