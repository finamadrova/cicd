name: register-data-assets
author: gabledata
description: Checks data assets defined in a product repository against any contracts defined in Gable
inputs:
  gable-api-endpoint:
    description: "Gable API Endpoint in the format https://api.<organization>.gabledata.com"
    required: true
  gable-api-key:
    description: "Gable API Key"
    required: true
  gable-version:
    description: "Gable CLI Version. See https://pypi.org/project/gable/#history for a list of available versions."
    required: false
    default: "latest"
  allow-gable-pre-release:
    description: "Whether or not to install pre-release versions of Gable"
    required: false
    default: "false"
  data-asset-options:
    description: |
      Options passed in to the 'gable data-asset register' command
    required: true
  github-token:
    description: "Github token used to comment on PR"
    default: ${{ github.token }}
    required: false
runs:
  using: "composite"
  steps:
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.10.11
    - name: Install Gable
      shell: bash
      run: |
        if [[ "${{ inputs.allow-gable-pre-release }}" == "true" ]]; then
          PRE_RELEASE_TAG="--pre"
        else
          PRE_RELEASE_TAG=""
        fi
        if [[ "${{ inputs.gable-version }}" == "latest" ]]; then
          pip install -q gable[postgres,mysql] $PRE_RELEASE_TAG
        else
          pip install -q gable[postgres,mysql]==${{ inputs.gable-version }} $PRE_RELEASE_TAG
        fi
    - name: Check out repository code
      uses: actions/checkout@v3
    - name: "Register Data Assets"
      env:
        PR_NUMBER: ${{ github.event.number }}
        GH_TOKEN: ${{ inputs.github-token }}
      shell: "bash"
      run: |
        # Set environment variables
        export GABLE_API_ENDPOINT="${{ inputs.gable-api-endpoint }}"
        export GABLE_API_KEY="${{ inputs.gable-api-key }}"

        # Trim any trailing whitespace including newlines from the input options
        export INPUT_OPTIONS="${{ inputs.data-asset-options }}"
        export INPUT_OPTIONS_TRIMMED="${INPUT_OPTIONS%%+([[:space:]])}"

        # If this was run on pull_request, handle output and errors accordingly
        if [[ "$PR_NUMBER" != "" ]]; then
          # Don't fail the command (yet) if we get an error, but capture the exit code
          set +e
          OUTPUT=$(gable data-asset register $INPUT_OPTIONS_TRIMMED 2> gable_error.txt)
          EXIT_CODE=$?
          set -e

          # If there was meaningful output, comment on the PR
          if [[ "$OUTPUT" != "" ]]; then
            echo "$OUTPUT" | gh pr comment $PR_NUMBER -F -
          else
            echo "Data assets successfully registered."
          fi

          # If there was error output
          if [ -s "gable_error.txt" ]; then
            # Print the error output that was captured so it shows up in the workflow's output
            cat "gable_error.txt"
          fi
          # Now exit with the exit code from the gable data-asset register command
          exit $EXIT_CODE
        else
          echo "No PR number found, running gable data-asset register directly"
          gable data-asset register $INPUT_OPTIONS_TRIMMED
        fi
branding:
  icon: "check-circle"
  color: "purple"
