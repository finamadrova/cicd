name: register-data-assets
author: gabledata
description: Checks data assets defined in a product repository against any contracts defined in Gable
inputs:
  gable-api-endpoint:
    description: 'Gable API Endpoint in the format https://api.<organization>.gabledata.com'
    required: true
  gable-api-key:
    description: 'Gable API Key'
    required: true
  gable-version:
    description: 'Gable CLI Version. See https://pypi.org/project/gable/#history for a list of available versions.'
    required: false
    default: 'latest'
  allow-gable-pre-release:
    description: 'Whether or not to install pre-release versions of Gable'
    required: false
    default: 'false'
  data-asset-options:
    description: |
      Options passed in to the 'gable data-asset register' command
    required: true
  github-token:
    description: 'Github token used to comment on PR'
    default: ${{ github.token }}
    required: false
  python-path:
    description: |
      [Optional] Path to the python executable to use, which allows you to create a virtual environment and install any necessary 
      dependencies before running gable. If not provided, the action will install Python on the runner.
    required: false
    default: 'python'
runs:
  using: "composite"
  steps:
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.10.11
    - name: Install Gable
      shell: bash
      run: |
        if [[ "${{ inputs.allow-gable-pre-release }}" == "true" ]]; then
          PRE_RELEASE_TAG="--pre"
        else
          PRE_RELEASE_TAG=""
        fi
        if [[ "${{ inputs.gable-version }}" == "latest" ]]; then
          ${{ inputs.python-path }} -m pip install -q gable[postgres,mysql] $PRE_RELEASE_TAG --upgrade
        else
          ${{ inputs.python-path }} -m pip install -q gable[postgres,mysql]==${{ inputs.gable-version }} $PRE_RELEASE_TAG
        fi
    - name: Check out repository code
      uses: actions/checkout@v4
      with:
        # Don't clean the repository before checking out the code, we don't want to remove any virtual environments or dependencies
        # that may have been installed
        clean: 'false'
    - name: "Register Data Assets"
      env: 
        PR_NUMBER: ${{ github.event.number }}
        GH_TOKEN: ${{ inputs.github-token }}
      shell: "bash"
      run: |
        # Run gable data-asset register with the specified options
        export PYTHON_PATH="${{ inputs.python-path }}"
        if [ -n "$PYTHON_PATH" ]; then
          VENV_BIN_PATH=$(dirname $PYTHON_PATH)
        else
          # If PYTHON_PATH is not provided, fallback to the current Python environment
          VENV_BIN_PATH=$(python -c "import sys; print(sys.prefix + '/bin')")
        fi
        echo Using Python virtual environment to run gable: $VENV_BIN_PATH
        echo Command options: ${{ inputs.data-asset-options }}
        GABLE_API_ENDPOINT="${{ inputs.gable-api-endpoint }}" GABLE_API_KEY="${{ inputs.gable-api-key }}" \
        PATH="$VENV_BIN_PATH:$PATH" gable data-asset register ${{ inputs.data-asset-options }}
branding:
  icon: 'check-circle'
  color: 'purple'
